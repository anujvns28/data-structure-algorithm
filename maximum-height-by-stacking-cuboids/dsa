class Solution {
public:
    bool check(vector<int>curr,vector<int>prev){
        if(curr[0]>=prev[0] && curr[1]>=prev[1] && curr[2]>=prev[2]) return true;
        else return false;
    }
    int solve_usingRec(vector<vector<int>>& cuboids,int index,int prev){
        if(index>=cuboids.size()) return 0;

        int include = 0;
        if(prev == -1 || check(cuboids[index],cuboids[prev])){
            include = cuboids[index][2] + solve_usingRec(cuboids,index+1,index);
        }
        int exclude = solve_usingRec(cuboids,index+1,prev);

        return max(include,exclude);
    }
    int solve_usingMemozation(vector<vector<int>>& cuboids,int index,int prev,vector<vector<int>>&dp){
        if(index>=cuboids.size()) return 0;
        
        if(dp[index][prev+1] != -1) return dp[index][prev+1];

        int include = 0;
        if(prev == -1 || check(cuboids[index],cuboids[prev])){
            include = cuboids[index][2] + solve_usingMemozation(cuboids,index+1,index,dp);
        }
        int exclude = solve_usingMemozation(cuboids,index+1,prev,dp);

        dp[index][prev+1] = max(include,exclude);
        return dp[index][prev+1];
    }
    int maxHeight(vector<vector<int>>& cuboids) {
        for(auto&cuboid: cuboids){
            sort(cuboid.begin(),cuboid.end());
        }
        sort(cuboids.begin(),cuboids.end());

        // return solve_usingRec(cuboids,0,-1);
        vector<vector<int>>dp(cuboids.size()+1,vector<int>(cuboids.size()+1,-1));
        return solve_usingMemozation(cuboids,0,-1,dp);
    }
};
