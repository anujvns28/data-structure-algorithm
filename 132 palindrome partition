class Solution {
public:
    bool isPalindrom(string&s,int i,int j){
        while(i<=j){
            if(s[i] != s[j]) return false;

            i++;
            j--;
        }
        return true;
    }

    int solve_usingrec(string&s,int i,int j){
        if(i>=j) return 0;
        if(isPalindrom(s,i,j)) return 0;

        int cuts = INT_MAX;
        for(int index=i;index<j;index++){
            int temp = 1 + solve_usingrec(s,i,index) + solve_usingrec(s,index+1,j);

            cuts = min(temp,cuts);
        }

        return cuts;
    }

    int solve_usingmemo(string&s,int i,int j,vector<vector<int>>&dp){
        if(i>=j) return 0;
        if(isPalindrom(s,i,j)) return dp[i][j] = 0;

        if(dp[i][j] != -1) return dp[i][j];

        int cuts = INT_MAX;
        for(int index=i;index<j;index++){
            int temp = 1 + solve_usingmemo(s,i,index,dp) + solve_usingmemo(s,index+1,j,dp);

            cuts = min(temp,cuts);
        }

        return dp[i][j] = cuts;
    }

    int solve_usingtab(string&s){
        int n = s.size();
        vector<vector<bool>> isPalin(n, vector<bool>(n, false));
        vector<int> dp(n, 0);

        for(int L=1;L<=n;L++){
            for(int i=0;i+L-1<n;i++){
                int j=i+L-1;

                if(i==j){
                    isPalin[i][i] = true;
                }
                else if(i+1 == j){
                    isPalin[i][j] = s[i] == s[j];
                }
                else{
                    isPalin[i][j] = ((s[i]==s[j]) && isPalin[i+1][j-1]);
                }
            }
        }

        for (int i = 0; i < n; i++) {
            if (isPalin[0][i]) {
                dp[i] = 0;
            } else {
                int minCuts = INT_MAX;
                for (int j = 0; j < i; j++) {
                    if (isPalin[j + 1][i]) {
                        minCuts = min(minCuts, dp[j] + 1);
                    }
                }
                dp[i] = minCuts;
            }
        }

        return dp[n - 1];
    }

    int minCut(string s) {
        // /return solve_usingrec(s,0,s.size()-1);

        // vector<vector<int>>dp(s.size()+1,vector<int>(s.size()+1,-1));
        // return solve_usingmemo(s,0,s.size()-1,dp);

        return solve_usingtab(s);
    }
};
